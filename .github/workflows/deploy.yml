name: Deploy LaMadre Django

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: true
      run: |
        python manage.py test
    
    - name: Run linting
      run: |
        black --check .
        flake8 .
        isort --check-only .

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Zakomentowane - nie u≈ºywamy rejestru obraz√≥w na tym etapie
    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build Docker images (local only)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false  # Nie wysy≈Çamy do rejestru - tylko lokalne obrazy
        tags: |
          lamadre-django:latest
          lamadre-django:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Przejd≈∫ do katalogu aplikacji
          cd /opt/lamadre-django
          
          # Zatrzymaj kontenery
          docker-compose down
          
          # Sprawd≈∫ czy sƒÖ lokalne zmiany
          if [ -n "$(git status --porcelain)" ]; then
            echo "‚ö†Ô∏è  Wykryto lokalne zmiany na serwerze - robiƒô stash..."
            git stash push -m "Auto-stash przed deployment $(date)"
          fi
          
          # Pobierz najnowsze zmiany
          echo "üì• Pobieram najnowsze zmiany z GitHub..."
          git pull origin main
          
          # Zbuduj obrazy lokalnie na serwerze
          echo "üê≥ Budujƒô obrazy Docker lokalnie na serwerze..."
          docker-compose build --no-cache
          
          # Uruchom kontenery
          echo "üöÄ Uruchamiam kontenery Docker..."
          docker-compose up -d
          
          # Czekam na uruchomienie bazy danych
          echo "‚è≥ Czekam na uruchomienie bazy danych..."
          sleep 30
          
          # Wykonaj migracje
          echo "üîÑ Wykonujƒô migracje..."
          docker-compose exec -T web python manage.py migrate
          
          # Kolekcjonuj pliki statyczne
          echo "üìÅ Kolekcjonujƒô pliki statyczne..."
          docker-compose exec -T web python manage.py collectstatic --noinput
          
          # Sprawd≈∫ status
          echo "üìä Sprawdzam status kontener√≥w..."
          docker-compose ps
          
          echo "‚úÖ Deployment zako≈Ñczony pomy≈õlnie!"
